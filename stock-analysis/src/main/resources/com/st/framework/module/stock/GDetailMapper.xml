<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.st.framework.persistence.mapper.stock.GDetailMapper" >
  <resultMap id="BaseResultMap" type="com.st.framework.module.stock.GDetail" >
    <result column="DATE_ID" property="dateId" jdbcType="INTEGER" />
    <result column="TIME_ID" property="timeId" jdbcType="VARCHAR" />
    <result column="PRICE" property="price" jdbcType="DOUBLE" />
    <result column="VOL" property="vol" jdbcType="INTEGER" />
    <result column="AMO" property="amo" jdbcType="INTEGER" />
    <result column="NATURE" property="nature" jdbcType="VARCHAR" />
    <result column="PRICE_CHANGES" property="priceChanges" jdbcType="DOUBLE" />
  </resultMap>
  
  <resultMap id="MMBean" type="com.st.analysis.controller.vo.MMBean" >
    <result column="DATE_ID_STR" property="dateIdStr" jdbcType="VARCHAR" />
    <result column="DATE_ID" property="dateId" jdbcType="INTEGER" />
    
    <result column="MAX_PRICE" property="maxPrice" jdbcType="DOUBLE" />
    <result column="MIN_PRICE" property="minPrice" jdbcType="DOUBLE" />
    
    <result column="MAX_TIME_ID" property="maxTimeId" jdbcType="VARCHAR" />
    <result column="MIN_TIME_ID" property="minTimeId" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    DATE_ID, TIME_ID, PRICE, VOL, AMO, NATURE, PRICE_CHANGES
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.st.framework.module.stock.example.GDetailExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from G_DETAIL_${stockCode}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    
    <if test="start != null and pageSize != null" >
      limit #{start}, #{pageSize}
    </if>
  </select>
  
  <select id="selectWareByExample" resultMap="BaseResultMap" parameterType="com.st.framework.module.stock.example.GDetailExample" >
    select distinct
    	DATE_ID, TIME_ID, PRICE
    from G_DETAIL_${stockCode}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="orderByClause == null" >
      order by DATE_ID, TIME_ID
    </if>
    
    <if test="start != null and pageSize != null" >
      limit #{start}, #{pageSize}
    </if>
  </select>
  
  <delete id="deleteByExample" parameterType="com.st.framework.module.stock.example.GDetailExample" >
    delete from G_DETAIL_${stockCode}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.st.framework.module.stock.GDetail" >
    insert into G_DETAIL_${stockCode} (DATE_ID, TIME_ID, PRICE, 
      VOL, AMO, NATURE, PRICE_CHANGES
      )
    values (#{dateId,jdbcType=INTEGER}, #{timeId,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}, 
      #{vol,jdbcType=INTEGER}, #{amo,jdbcType=INTEGER}, #{nature,jdbcType=VARCHAR}, #{priceChanges,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.st.framework.module.stock.GDetail" >
    insert into G_DETAIL_${stockCode}
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="dateId != null" >
        DATE_ID,
      </if>
      <if test="timeId != null" >
        TIME_ID,
      </if>
      <if test="price != null" >
        PRICE,
      </if>
      <if test="vol != null" >
        VOL,
      </if>
      <if test="amo != null" >
        AMO,
      </if>
      <if test="nature != null" >
        NATURE,
      </if>
      <if test="priceChanges != null" >
        PRICE_CHANGES,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="dateId != null" >
        #{dateId,jdbcType=INTEGER},
      </if>
      <if test="timeId != null" >
        #{timeId,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="vol != null" >
        #{vol,jdbcType=INTEGER},
      </if>
      <if test="amo != null" >
        #{amo,jdbcType=INTEGER},
      </if>
      <if test="nature != null" >
        #{nature,jdbcType=VARCHAR},
      </if>
      <if test="priceChanges != null" >
        #{priceChanges,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.st.framework.module.stock.example.GDetailExample" resultType="java.lang.Integer" >
    select count(*) from G_DETAIL_${stockCode}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update G_DETAIL_${stockCode}
    <set >
      <if test="record.dateId != null" >
        DATE_ID = #{record.dateId,jdbcType=INTEGER},
      </if>
      <if test="record.timeId != null" >
        TIME_ID = #{record.timeId,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        PRICE = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.vol != null" >
        VOL = #{record.vol,jdbcType=INTEGER},
      </if>
      <if test="record.amo != null" >
        AMO = #{record.amo,jdbcType=INTEGER},
      </if>
      <if test="record.nature != null" >
        NATURE = #{record.nature,jdbcType=VARCHAR},
      </if>
      <if test="record.priceChanges != null" >
        PRICE_CHANGES = #{record.priceChanges,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update G_DETAIL_${stockCode}
    set DATE_ID = #{record.dateId,jdbcType=INTEGER},
      TIME_ID = #{record.timeId,jdbcType=VARCHAR},
      PRICE = #{record.price,jdbcType=DOUBLE},
      VOL = #{record.vol,jdbcType=INTEGER},
      AMO = #{record.amo,jdbcType=INTEGER},
      NATURE = #{record.nature,jdbcType=VARCHAR},
      PRICE_CHANGES = #{record.priceChanges,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="createGDetailTable" parameterType="map" >
  	<if test="stockCode != null">
	  	CREATE TABLE  G_DETAIL_${stockCode} (
		  `DATE_ID` int(10) NOT NULL,
		  `TIME_ID` varchar(10) NOT NULL COMMENT '成交时间',
		  `PRICE` double(5,2) NOT NULL COMMENT '成交价PRICE',
		  `PRICE_CHANGES` double(5,2) NOT NULL COMMENT '价格变动',
		  `VOL` int(10) unsigned NOT NULL COMMENT '成交量(手)',
		  `AMO` int(10) unsigned NOT NULL COMMENT '成交额(元)',
		  `NATURE` varchar(5) NOT NULL COMMENT 'b buy  s sell',
		  UNIQUE KEY `IDX_G_DETAIL_${stockCode}_UNIQUE` (`DATE_ID`,`TIME_ID`,`PRICE`,`PRICE_CHANGES`,`VOL`,`AMO`,`NATURE`),
		  	KEY `IDX_G_DETAIL_${stockCode}_DATE_ID` (`DATE_ID`),
  			KEY `IDX_G_DETAIL_${stockCode}_TIME_ID` (`TIME_ID`),
  			KEY `IDX_G_DETAIL_${stockCode}_DATE_TIME_ID` (`DATE_ID`,`TIME_ID`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8	
		PARTITION BY RANGE  (DATE_ID)
		( 
			PARTITION p0901 VALUES LESS THAN (20090131) ENGINE = InnoDB,
			PARTITION p0902 VALUES LESS THAN (20090231) ENGINE = InnoDB,
			PARTITION p0903 VALUES LESS THAN (20090331) ENGINE = InnoDB,
			PARTITION p0904 VALUES LESS THAN (20090431) ENGINE = InnoDB,
			PARTITION p0905 VALUES LESS THAN (20090531) ENGINE = InnoDB,
			PARTITION p0906 VALUES LESS THAN (20090631) ENGINE = InnoDB,
			PARTITION p0907 VALUES LESS THAN (20090731) ENGINE = InnoDB,
			PARTITION p0908 VALUES LESS THAN (20090831) ENGINE = InnoDB,
			PARTITION p0909 VALUES LESS THAN (20090931) ENGINE = InnoDB,
			PARTITION p0910 VALUES LESS THAN (20091031) ENGINE = InnoDB,
			PARTITION p0911 VALUES LESS THAN (20091131) ENGINE = InnoDB,
			PARTITION p0912 VALUES LESS THAN (20091231) ENGINE = InnoDB,
			
			PARTITION p1001 VALUES LESS THAN (20100131) ENGINE = InnoDB,
			PARTITION p1002 VALUES LESS THAN (20100231) ENGINE = InnoDB,
			PARTITION p1003 VALUES LESS THAN (20100331) ENGINE = InnoDB,
			PARTITION p1004 VALUES LESS THAN (20100431) ENGINE = InnoDB,
			PARTITION p1005 VALUES LESS THAN (20100531) ENGINE = InnoDB,
			PARTITION p1006 VALUES LESS THAN (20100631) ENGINE = InnoDB,
			PARTITION p1007 VALUES LESS THAN (20100731) ENGINE = InnoDB,
			PARTITION p1008 VALUES LESS THAN (20100831) ENGINE = InnoDB,
			PARTITION p1009 VALUES LESS THAN (20100931) ENGINE = InnoDB,
			PARTITION p1010 VALUES LESS THAN (20101031) ENGINE = InnoDB,
			PARTITION p1011 VALUES LESS THAN (20101131) ENGINE = InnoDB,
			PARTITION p1012 VALUES LESS THAN (20101231) ENGINE = InnoDB,
			
			PARTITION p1101 VALUES LESS THAN (20110131) ENGINE = InnoDB,
			PARTITION p1102 VALUES LESS THAN (20110231) ENGINE = InnoDB,
			PARTITION p1103 VALUES LESS THAN (20110331) ENGINE = InnoDB,
			PARTITION p1104 VALUES LESS THAN (20110431) ENGINE = InnoDB,
			PARTITION p1105 VALUES LESS THAN (20110531) ENGINE = InnoDB,
			PARTITION p1106 VALUES LESS THAN (20110631) ENGINE = InnoDB,
			PARTITION p1107 VALUES LESS THAN (20110731) ENGINE = InnoDB,
			PARTITION p1108 VALUES LESS THAN (20110831) ENGINE = InnoDB,
			PARTITION p1109 VALUES LESS THAN (20110931) ENGINE = InnoDB,
			PARTITION p1110 VALUES LESS THAN (20111031) ENGINE = InnoDB,
			PARTITION p1111 VALUES LESS THAN (20111131) ENGINE = InnoDB,
			PARTITION p1112 VALUES LESS THAN (20111231) ENGINE = InnoDB,
			
			PARTITION p1201 VALUES LESS THAN (20120131) ENGINE = InnoDB,
			PARTITION p1202 VALUES LESS THAN (20120231) ENGINE = InnoDB,
			PARTITION p1203 VALUES LESS THAN (20120331) ENGINE = InnoDB,
			PARTITION p1204 VALUES LESS THAN (20120431) ENGINE = InnoDB,
			PARTITION p1205 VALUES LESS THAN (20120531) ENGINE = InnoDB,
			PARTITION p1206 VALUES LESS THAN (20120631) ENGINE = InnoDB,
			PARTITION p1207 VALUES LESS THAN (20120731) ENGINE = InnoDB,
			PARTITION p1208 VALUES LESS THAN (20120831) ENGINE = InnoDB,
			PARTITION p1209 VALUES LESS THAN (20120931) ENGINE = InnoDB,
			PARTITION p1210 VALUES LESS THAN (20121031) ENGINE = InnoDB,
			PARTITION p1211 VALUES LESS THAN (20121131) ENGINE = InnoDB,
			PARTITION p1212 VALUES LESS THAN (20121231) ENGINE = InnoDB,
			
			PARTITION p1301 VALUES LESS THAN (20130131) ENGINE = InnoDB,
			PARTITION p1302 VALUES LESS THAN (20130231) ENGINE = InnoDB,
			PARTITION p1303 VALUES LESS THAN (20130331) ENGINE = InnoDB,
			PARTITION p1304 VALUES LESS THAN (20130431) ENGINE = InnoDB,
			PARTITION p1305 VALUES LESS THAN (20130531) ENGINE = InnoDB,
			PARTITION p1306 VALUES LESS THAN (20130631) ENGINE = InnoDB,
			PARTITION p1307 VALUES LESS THAN (20130731) ENGINE = InnoDB,
			PARTITION p1308 VALUES LESS THAN (20130831) ENGINE = InnoDB,
			PARTITION p1309 VALUES LESS THAN (20130931) ENGINE = InnoDB,
			PARTITION p1310 VALUES LESS THAN (20131031) ENGINE = InnoDB,
			PARTITION p1311 VALUES LESS THAN (20131131) ENGINE = InnoDB,
			PARTITION p1312 VALUES LESS THAN (20131231) ENGINE = InnoDB,
			
			PARTITION p1401 VALUES LESS THAN (20140131) ENGINE = InnoDB,
			PARTITION p1402 VALUES LESS THAN (20140231) ENGINE = InnoDB,
			PARTITION p1403 VALUES LESS THAN (20140331) ENGINE = InnoDB,
			PARTITION p1404 VALUES LESS THAN (20140431) ENGINE = InnoDB,
			PARTITION p1405 VALUES LESS THAN (20140531) ENGINE = InnoDB,
			PARTITION p1406 VALUES LESS THAN (20140631) ENGINE = InnoDB,
			PARTITION p1407 VALUES LESS THAN (20140731) ENGINE = InnoDB,
			PARTITION p1408 VALUES LESS THAN (20140831) ENGINE = InnoDB,
			PARTITION p1409 VALUES LESS THAN (20140931) ENGINE = InnoDB,
			PARTITION p1410 VALUES LESS THAN (20141031) ENGINE = InnoDB,
			PARTITION p1411 VALUES LESS THAN (20141131) ENGINE = InnoDB,
			PARTITION p1412 VALUES LESS THAN (20141231) ENGINE = InnoDB,
			
			PARTITION p1501 VALUES LESS THAN (20150131) ENGINE = InnoDB,
			PARTITION p1502 VALUES LESS THAN (20150231) ENGINE = InnoDB,
			PARTITION p1503 VALUES LESS THAN (20150331) ENGINE = InnoDB,
			PARTITION p1504 VALUES LESS THAN (20150431) ENGINE = InnoDB,
			PARTITION p1505 VALUES LESS THAN (20150531) ENGINE = InnoDB,
			PARTITION p1506 VALUES LESS THAN (20150631) ENGINE = InnoDB,
			PARTITION p1507 VALUES LESS THAN (20150731) ENGINE = InnoDB,
			PARTITION p1508 VALUES LESS THAN (20150831) ENGINE = InnoDB,
			PARTITION p1509 VALUES LESS THAN (20150931) ENGINE = InnoDB,
			PARTITION p1510 VALUES LESS THAN (20151031) ENGINE = InnoDB,
			PARTITION p1511 VALUES LESS THAN (20151131) ENGINE = InnoDB,
			PARTITION p1512 VALUES LESS THAN (20151231) ENGINE = InnoDB,
			
			PARTITION p1601 VALUES LESS THAN (20160131) ENGINE = InnoDB,
			PARTITION p1602 VALUES LESS THAN (20160231) ENGINE = InnoDB,
			PARTITION p1603 VALUES LESS THAN (20160331) ENGINE = InnoDB,
			PARTITION p1604 VALUES LESS THAN (20160431) ENGINE = InnoDB,
			PARTITION p1605 VALUES LESS THAN (20160531) ENGINE = InnoDB,
			PARTITION p1606 VALUES LESS THAN (20160631) ENGINE = InnoDB,
			PARTITION p1607 VALUES LESS THAN (20160731) ENGINE = InnoDB,
			PARTITION p1608 VALUES LESS THAN (20160831) ENGINE = InnoDB,
			PARTITION p1609 VALUES LESS THAN (20160931) ENGINE = InnoDB,
			PARTITION p1610 VALUES LESS THAN (20161031) ENGINE = InnoDB,
			PARTITION p1611 VALUES LESS THAN (20161131) ENGINE = InnoDB,
			PARTITION p1612 VALUES LESS THAN (20161231) ENGINE = InnoDB
		);
  	</if>
  </update>
  
  <select id="selectDetailTableName" resultType="java.lang.String" parameterType="map">
  	SHOW TABLES LIKE 'G_DETAIL_${stockCode}'
  </select>
  
  <!--  批量 ，传入一个长度为1000的list  -->
	<insert id="insertBatch" parameterType="map">
	    insert ignore into G_DETAIL_${stockCode}
	    (DATE_ID, TIME_ID, PRICE, PRICE_CHANGES, VOL, AMO, NATURE) 
	    values 
	    <foreach collection="list" item="item" index="index" separator=",">
	        (#{item.dateId},#{item.timeId},#{item.price},#{item.priceChanges},#{item.vol},#{item.amo},#{item.nature})
	    </foreach>
	    
	</insert>
	
	<insert id="insertStringBatch" parameterType="map">
		${sqlString}		
	</insert>
	
	
	
	
	<select id="selectStockDay" resultMap="com.st.framework.persistence.mapper.stock.GStockDayMapper.BaseResultMap" parameterType="map">	
		select substring(#{stockCode},3) as STOCK,
		CONCAT(
			substring(o.DATE_ID ,1, 4), '-', substring(o.DATE_ID,5, 2), '-', substring(o.DATE_ID,7)
		) as DATE,
		o.OPEN, mm.HIGH, mm.LOW, c.CLOSE, 
		0 as VOLUME , 0 as ADJ_CLOSE
		from (
			select distinct DATE_ID,PRICE as OPEN from G_DETAIL_${stockCode}
			where PRICE_CHANGES = PRICE
			<if test="startDateId != null">
				<![CDATA[
				and DATE_ID >= #{startDateId}
				]]>
			</if>
			<if test="endDateId != null">
				<![CDATA[
				and DATE_ID <= #{endDateId}
				]]>
			</if>
			order by DATE_ID
			<!-- order by DATE_ID desc,TIME_ID -->
		) o inner join  (
			select distinct DATE_ID,PRICE as CLOSE from G_DETAIL_${stockCode}
			where TIME_ID>'15:00:00'
			<if test="startDateId != null">
				<![CDATA[
				and DATE_ID >= #{startDateId}
				]]>
			</if>
			<if test="endDateId != null">
				<![CDATA[
				and DATE_ID <= #{endDateId}
				]]>
			</if>
			order by DATE_ID
		) c on o.DATE_ID=c.DATE_ID
		inner join (
			select distinct
			DATE_ID, max(PRICE) as HIGH, min(PRICE) as LOW from G_DETAIL_${stockCode}
			
			<if test="startDateId != null or endDateId != null">
				where 1=1
				<if test="startDateId != null">
					<![CDATA[
					and DATE_ID >= #{startDateId}
					]]>
				</if>
				<if test="endDateId != null">
					<![CDATA[
					and DATE_ID <= #{endDateId}
					]]>
				</if>
			</if>
			
			group by DATE_ID
			
		) mm on mm.DATE_ID=c.DATE_ID
	</select>
	
	<select id="selectMMBaseData" resultMap="MMBean" parameterType="map">		
		<foreach collection="dateIds" item="dateId"  separator="UNION ALL" >
			(              
			select CONCAT(substr(mx.DATE_ID,1,4),'-',substr(mx.DATE_ID,5,2),'-',substr(mx.DATE_ID,7,2)) as DATE_ID_STR, 
			mx.DATE_ID as DATE_ID,
			mx.PRICE as MAX_PRICE, mn.PRICE as MIN_PRICE,
			mx.TIME_ID as MAX_TIME_ID, mn.TIME_ID as MIN_TIME_ID
			from
			(
			select DATE_ID,TIME_ID,PRICE from G_DETAIL_${stockCode}
			where DATE_ID in (#{dateId}) 
			#and TIME_ID >= '09:30:00'
			order by PRICE, TIME_ID
			limit 1) mx
			inner join
			(select DATE_ID,TIME_ID,PRICE from G_DETAIL_${stockCode}
			where DATE_ID in (#{dateId}) 
			#and TIME_ID >= '09:30:00'
			order by PRICE desc, TIME_ID
			limit 1) mn
			on mx.DATE_ID=mn.DATE_ID
			)
        </foreach>
	</select>
	
	<select id="selectDetailActiveDateId" resultType="java.lang.Integer" parameterType="map">
		select distinct DATE_ID from G_DETAIL_${stockCode}
		<if test="startDateId != null or endDateId != null">
			where 1=1
			<if test="startDateId != null">
				<![CDATA[
				and DATE_ID >= #{startDateId}
				]]>
			</if>
			<if test="endDateId != null">
				<![CDATA[
				and DATE_ID <= #{endDateId}
				]]>
			</if>
		</if>
	</select>
</mapper>