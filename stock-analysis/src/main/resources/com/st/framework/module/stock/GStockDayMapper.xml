<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.st.framework.persistence.mapper.stock.GStockDayMapper" >
  <resultMap id="BaseResultMap" type="com.st.framework.module.stock.GStockDay" >
    <id column="STOCK" property="stock" jdbcType="INTEGER" />
    <id column="DATE" property="date" jdbcType="DATE" />
    <result column="OPEN" property="open" jdbcType="DOUBLE" />
    <result column="HIGH" property="high" jdbcType="DOUBLE" />
    <result column="LOW" property="low" jdbcType="DOUBLE" />
    <result column="CLOSE" property="close" jdbcType="DOUBLE" />
    <result column="VOLUME" property="volume" jdbcType="INTEGER" />
    <result column="ADJ_CLOSE" property="adjClose" jdbcType="DOUBLE" />
    <result column="PRICE_CHANGES" property="priceChanges" jdbcType="DOUBLE" />
    <result column="HIGH_TIME_ID" property="highTimeId" jdbcType="VARCHAR" />
    <result column="LOW_TIME_ID" property="lowTimeId" jdbcType="VARCHAR" />
    <result column="AMPLITUDE" property="amplitude" jdbcType="DOUBLE" />
    <result column="HIGH_PER" property="highPer" jdbcType="DOUBLE" />
    <result column="LOW_PER" property="lowPer" jdbcType="DOUBLE" />
    <result column="CLOSE_PER" property="closePer" jdbcType="DOUBLE" />
    <result column="OPEN_PER" property="openPer" jdbcType="DOUBLE" />
    <result column="TURN_VOLUME" property="turnVolume" jdbcType="DOUBLE" />
    <result column="TURNOVER_RATE" property="turnoverRate" jdbcType="DOUBLE" />
    
    <collection property="MA5" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	javaType="DOUBLE" select="selectMA5" />
    <collection property="MA10" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	javaType="DOUBLE" select="selectMA10" />
    
    <collection property="prevDay" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" select="selectPrevDay" />
    <collection property="nextDay" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" select="selectNextDay" />
    	
    <collection property="prev5Day" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" javaType="ArrayList" select="selectPrev5Day" />
    <collection property="next5Day" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" javaType="ArrayList" select="selectNext5Day" />
    	
    <collection property="prev10Day" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" javaType="ArrayList" select="selectPrev10Day" />
    <collection property="next10Day" fetchType="lazy" column="{stock=STOCK,date=DATE}" 
    	ofType="GStockDay" javaType="ArrayList" select="selectNext10Day" />
    	
  </resultMap>
  
  <resultMap id="TimeRangeCountResultMap" type="com.st.analysis.controller.vo.timerange.TimeRangeCountBeanResponse">
  	<result column="rangeName" property="rangeName" jdbcType="VARCHAR" />
    <result column="rangeCount" property="rangeCount" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    STOCK, DATE, OPEN, HIGH, LOW, CLOSE, VOLUME, ADJ_CLOSE, PRICE_CHANGES, HIGH_TIME_ID, 
    LOW_TIME_ID, AMPLITUDE, HIGH_PER, LOW_PER, CLOSE_PER, OPEN_PER, TURN_VOLUME, TURNOVER_RATE
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.st.framework.module.stock.example.GStockDayExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from G_STOCK_DAY
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="start != null and pageSize != null" >
      limit #{start}, #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.st.framework.module.stock.GStockDayKey" >
    select 
    <include refid="Base_Column_List" />
    from G_STOCK_DAY
    where STOCK = #{stock,jdbcType=INTEGER}
      and DATE = #{date,jdbcType=DATE}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.st.framework.module.stock.GStockDayKey" >
    delete from G_STOCK_DAY
    where STOCK = #{stock,jdbcType=INTEGER}
      and DATE = #{date,jdbcType=DATE}
  </delete>
  <delete id="deleteByExample" parameterType="com.st.framework.module.stock.example.GStockDayExample" >
    delete from G_STOCK_DAY
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.st.framework.module.stock.GStockDay" >
    insert into G_STOCK_DAY (STOCK, DATE, OPEN, 
      HIGH, LOW, CLOSE, VOLUME, 
      ADJ_CLOSE, PRICE_CHANGES, HIGH_TIME_ID, 
      LOW_TIME_ID, AMPLITUDE, HIGH_PER, 
      LOW_PER, CLOSE_PER, OPEN_PER, 
      TURN_VOLUME, TURNOVER_RATE)
    values (#{stock,jdbcType=INTEGER}, #{date,jdbcType=DATE}, #{open,jdbcType=DOUBLE}, 
      #{high,jdbcType=DOUBLE}, #{low,jdbcType=DOUBLE}, #{close,jdbcType=DOUBLE}, #{volume,jdbcType=INTEGER}, 
      #{adjClose,jdbcType=DOUBLE}, #{priceChanges,jdbcType=DOUBLE}, #{highTimeId,jdbcType=VARCHAR}, 
      #{lowTimeId,jdbcType=VARCHAR}, #{amplitude,jdbcType=DOUBLE}, #{highPer,jdbcType=DOUBLE}, 
      #{lowPer,jdbcType=DOUBLE}, #{closePer,jdbcType=DOUBLE}, #{openPer,jdbcType=DOUBLE}, 
      #{turnVolume,jdbcType=DOUBLE}, #{turnoverRate,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.st.framework.module.stock.GStockDay" >
    insert into G_STOCK_DAY
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="stock != null" >
        STOCK,
      </if>
      <if test="date != null" >
        DATE,
      </if>
      <if test="open != null" >
        OPEN,
      </if>
      <if test="high != null" >
        HIGH,
      </if>
      <if test="low != null" >
        LOW,
      </if>
      <if test="close != null" >
        CLOSE,
      </if>
      <if test="volume != null" >
        VOLUME,
      </if>
      <if test="adjClose != null" >
        ADJ_CLOSE,
      </if>
      <if test="priceChanges != null" >
        PRICE_CHANGES,
      </if>
      <if test="highTimeId != null" >
        HIGH_TIME_ID,
      </if>
      <if test="lowTimeId != null" >
        LOW_TIME_ID,
      </if>
      <if test="amplitude != null" >
        AMPLITUDE,
      </if>
      <if test="highPer != null" >
        HIGH_PER,
      </if>
      <if test="lowPer != null" >
        LOW_PER,
      </if>
      <if test="closePer != null" >
        CLOSE_PER,
      </if>
      <if test="openPer != null" >
        OPEN_PER,
      </if>
      <if test="turnVolume != null" >
        TURN_VOLUME,
      </if>
      <if test="turnoverRate != null" >
        TURNOVER_RATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="stock != null" >
        #{stock,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        #{date,jdbcType=DATE},
      </if>
      <if test="open != null" >
        #{open,jdbcType=DOUBLE},
      </if>
      <if test="high != null" >
        #{high,jdbcType=DOUBLE},
      </if>
      <if test="low != null" >
        #{low,jdbcType=DOUBLE},
      </if>
      <if test="close != null" >
        #{close,jdbcType=DOUBLE},
      </if>
      <if test="volume != null" >
        #{volume,jdbcType=INTEGER},
      </if>
      <if test="adjClose != null" >
        #{adjClose,jdbcType=DOUBLE},
      </if>
      <if test="priceChanges != null" >
        #{priceChanges,jdbcType=DOUBLE},
      </if>
      <if test="highTimeId != null" >
        #{highTimeId,jdbcType=VARCHAR},
      </if>
      <if test="lowTimeId != null" >
        #{lowTimeId,jdbcType=VARCHAR},
      </if>
      <if test="amplitude != null" >
        #{amplitude,jdbcType=DOUBLE},
      </if>
      <if test="highPer != null" >
        #{highPer,jdbcType=DOUBLE},
      </if>
      <if test="lowPer != null" >
        #{lowPer,jdbcType=DOUBLE},
      </if>
      <if test="closePer != null" >
        #{closePer,jdbcType=DOUBLE},
      </if>
      <if test="openPer != null" >
        #{openPer,jdbcType=DOUBLE},
      </if>
      <if test="turnVolume != null" >
        #{turnVolume,jdbcType=DOUBLE},
      </if>
      <if test="turnoverRate != null" >
        #{turnoverRate,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.st.framework.module.stock.example.GStockDayExample" resultType="java.lang.Integer" >
    select count(*) from G_STOCK_DAY
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update G_STOCK_DAY
    <set >
      <if test="record.stock != null" >
        STOCK = #{record.stock,jdbcType=INTEGER},
      </if>
      <if test="record.date != null" >
        DATE = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.open != null" >
        OPEN = #{record.open,jdbcType=DOUBLE},
      </if>
      <if test="record.high != null" >
        HIGH = #{record.high,jdbcType=DOUBLE},
      </if>
      <if test="record.low != null" >
        LOW = #{record.low,jdbcType=DOUBLE},
      </if>
      <if test="record.close != null" >
        CLOSE = #{record.close,jdbcType=DOUBLE},
      </if>
      <if test="record.volume != null" >
        VOLUME = #{record.volume,jdbcType=INTEGER},
      </if>
      <if test="record.adjClose != null" >
        ADJ_CLOSE = #{record.adjClose,jdbcType=DOUBLE},
      </if>
      <if test="record.priceChanges != null" >
        PRICE_CHANGES = #{record.priceChanges,jdbcType=DOUBLE},
      </if>
      <if test="record.highTimeId != null" >
        HIGH_TIME_ID = #{record.highTimeId,jdbcType=VARCHAR},
      </if>
      <if test="record.lowTimeId != null" >
        LOW_TIME_ID = #{record.lowTimeId,jdbcType=VARCHAR},
      </if>
      <if test="record.amplitude != null" >
        AMPLITUDE = #{record.amplitude,jdbcType=DOUBLE},
      </if>
      <if test="record.highPer != null" >
        HIGH_PER = #{record.highPer,jdbcType=DOUBLE},
      </if>
      <if test="record.lowPer != null" >
        LOW_PER = #{record.lowPer,jdbcType=DOUBLE},
      </if>
      <if test="record.closePer != null" >
        CLOSE_PER = #{record.closePer,jdbcType=DOUBLE},
      </if>
      <if test="record.openPer != null" >
        OPEN_PER = #{record.openPer,jdbcType=DOUBLE},
      </if>
      <if test="record.turnVolume != null" >
        TURN_VOLUME = #{record.turnVolume,jdbcType=DOUBLE},
      </if>
      <if test="record.turnoverRate != null" >
        TURNOVER_RATE = #{record.turnoverRate,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update G_STOCK_DAY
    set STOCK = #{record.stock,jdbcType=INTEGER},
      DATE = #{record.date,jdbcType=DATE},
      OPEN = #{record.open,jdbcType=DOUBLE},
      HIGH = #{record.high,jdbcType=DOUBLE},
      LOW = #{record.low,jdbcType=DOUBLE},
      CLOSE = #{record.close,jdbcType=DOUBLE},
      VOLUME = #{record.volume,jdbcType=INTEGER},
      ADJ_CLOSE = #{record.adjClose,jdbcType=DOUBLE},
      PRICE_CHANGES = #{record.priceChanges,jdbcType=DOUBLE},
      HIGH_TIME_ID = #{record.highTimeId,jdbcType=VARCHAR},
      LOW_TIME_ID = #{record.lowTimeId,jdbcType=VARCHAR},
      AMPLITUDE = #{record.amplitude,jdbcType=DOUBLE},
      HIGH_PER = #{record.highPer,jdbcType=DOUBLE},
      LOW_PER = #{record.lowPer,jdbcType=DOUBLE},
      CLOSE_PER = #{record.closePer,jdbcType=DOUBLE},
      OPEN_PER = #{record.openPer,jdbcType=DOUBLE},
      TURN_VOLUME = #{record.turnVolume,jdbcType=DOUBLE},
      TURNOVER_RATE = #{record.turnoverRate,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.st.framework.module.stock.GStockDay" >
    update G_STOCK_DAY
    <set >
      <if test="open != null" >
        OPEN = #{open,jdbcType=DOUBLE},
      </if>
      <if test="high != null" >
        HIGH = #{high,jdbcType=DOUBLE},
      </if>
      <if test="low != null" >
        LOW = #{low,jdbcType=DOUBLE},
      </if>
      <if test="close != null" >
        CLOSE = #{close,jdbcType=DOUBLE},
      </if>
      <if test="volume != null" >
        VOLUME = #{volume,jdbcType=INTEGER},
      </if>
      <if test="adjClose != null" >
        ADJ_CLOSE = #{adjClose,jdbcType=DOUBLE},
      </if>
      <if test="priceChanges != null" >
        PRICE_CHANGES = #{priceChanges,jdbcType=DOUBLE},
      </if>
      <if test="highTimeId != null" >
        HIGH_TIME_ID = #{highTimeId,jdbcType=VARCHAR},
      </if>
      <if test="lowTimeId != null" >
        LOW_TIME_ID = #{lowTimeId,jdbcType=VARCHAR},
      </if>
      <if test="amplitude != null" >
        AMPLITUDE = #{amplitude,jdbcType=DOUBLE},
      </if>
      <if test="highPer != null" >
        HIGH_PER = #{highPer,jdbcType=DOUBLE},
      </if>
      <if test="lowPer != null" >
        LOW_PER = #{lowPer,jdbcType=DOUBLE},
      </if>
      <if test="closePer != null" >
        CLOSE_PER = #{closePer,jdbcType=DOUBLE},
      </if>
      <if test="openPer != null" >
        OPEN_PER = #{openPer,jdbcType=DOUBLE},
      </if>
      <if test="turnVolume != null" >
        TURN_VOLUME = #{turnVolume,jdbcType=DOUBLE},
      </if>
      <if test="turnoverRate != null" >
        TURNOVER_RATE = #{turnoverRate,jdbcType=DOUBLE},
      </if>
    </set>
    where STOCK = #{stock,jdbcType=INTEGER}
      and DATE = #{date,jdbcType=DATE}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.st.framework.module.stock.GStockDay" >
    update G_STOCK_DAY
    set OPEN = #{open,jdbcType=DOUBLE},
      HIGH = #{high,jdbcType=DOUBLE},
      LOW = #{low,jdbcType=DOUBLE},
      CLOSE = #{close,jdbcType=DOUBLE},
      VOLUME = #{volume,jdbcType=INTEGER},
      ADJ_CLOSE = #{adjClose,jdbcType=DOUBLE},
      PRICE_CHANGES = #{priceChanges,jdbcType=DOUBLE},
      HIGH_TIME_ID = #{highTimeId,jdbcType=VARCHAR},
      LOW_TIME_ID = #{lowTimeId,jdbcType=VARCHAR},
      AMPLITUDE = #{amplitude,jdbcType=DOUBLE},
      HIGH_PER = #{highPer,jdbcType=DOUBLE},
      LOW_PER = #{lowPer,jdbcType=DOUBLE},
      CLOSE_PER = #{closePer,jdbcType=DOUBLE},
      OPEN_PER = #{openPer,jdbcType=DOUBLE},
      TURN_VOLUME = #{turnVolume,jdbcType=DOUBLE},
      TURNOVER_RATE = #{turnoverRate,jdbcType=DOUBLE}
    where STOCK = #{stock,jdbcType=INTEGER}
      and DATE = #{date,jdbcType=DATE}
  </update>
  
  <update id="batchUpdateMMByPrimaryKey"  parameterType="java.util.List">
	<foreach collection="list" item="item" index="index" open=""
		close="" separator="">
		update G_STOCK_DAY
		set
			HIGH_TIME_ID = #{item.highTimeId,jdbcType=VARCHAR},
			LOW_TIME_ID = #{item.lowTimeId,jdbcType=VARCHAR}			      
		where STOCK = #{item.stock,jdbcType=INTEGER}
		and DATE = #{item.date,jdbcType=DATE}
	</foreach>
  </update>
  
  <insert id="insertBatch" parameterType="map" >
    insert ignore into G_STOCK_DAY
	(STOCK,DATE,OPEN,HIGH,LOW,CLOSE,VOLUME,ADJ_CLOSE,PRICE_CHANGES,HIGH_TIME_ID,LOW_TIME_ID,AMPLITUDE,HIGH_PER,LOW_PER,CLOSE_PER,OPEN_PER,TURN_VOLUME,TURNOVER_RATE)
	values
	<foreach collection="list" item="item" index="index" separator=",">
		(#{item.stock},#{item.date},#{item.open},#{item.high},#{item.low},#{item.close},#{item.volume},#{item.adjClose},#{item.priceChanges},#{item.highTimeId},#{item.lowTimeId},#{item.amplitude},#{item.highPer},#{item.lowPer},#{item.closePer},#{item.openPer},#{item.turnVolume},#{item.turnoverRate})
	</foreach>
  </insert>
  
  
  <update id="updatePriceChanges" parameterType="map">
  		update G_STOCK_DAY
		set PRICE_CHANGES = (CLOSE - OPEN)		
		<if test="stock != null">
			where
			STOCK = #{stock,jdbcType=INTEGER}
		</if>		 
  </update>
  
  <select id="selectByTimeRange" resultMap="TimeRangeCountResultMap" parameterType="map">
  	<!-- select 
	elt(interval(time(high_time_id),time('09:25:00'), time('09:30:00'), time('09:35:00')), 
	'a1', 'a2', 'a3') as yb_level, 
	count(date) as cnt
	from G_STOCK_DAY 
	where high_time_id is not null
	and (
	high_per >=2 and high_per <3
	)
	and date >= '2014-06-00'
	group by 
	elt(interval(time(high_time_id),time('09:25:00'), time('09:30:00'), time('09:35:00')), 
	'a1', 'a2', 'a3'); -->
	select 
	elt(
		interval(time(#{timeClause}),
		<foreach collection="timeRanges" item="listItem" separator="," >
	      time(#{listItem.rangeTimeId})
	    </foreach>
	    ), 
		<foreach collection="timeRanges" item="listItem" separator="," >
	      #{listItem.rangeName}
	    </foreach>
	) as rangeName, 
	count(date) as rangeCount
	from G_STOCK_DAY 
	
	<if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    
	group by 
	elt(
		interval(time(#{timeClause}),
		<foreach collection="timeRanges" item="listItem" separator="," >
	      time(#{listItem.rangeTimeId})
	    </foreach>
	    ), 
		<foreach collection="timeRanges" item="listItem" separator="," >
	      #{listItem.rangeName}
	    </foreach>
	)
  </select>
  
  <select id="selectNextDay" resultMap="BaseResultMap" parameterType="map">
  	select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
	    from G_STOCK_DAY
	    where
			STOCK = #{stock,jdbcType=INTEGER} 
			<![CDATA[
				and DATE > #{date,jdbcType=DATE}
			]]>
			order by DATE asc
			limit 1			
  </select>
  <select id="selectPrevDay" resultMap="BaseResultMap" parameterType="map">
  	select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
	    from G_STOCK_DAY
	    where
			STOCK = #{stock,jdbcType=INTEGER} 
			<![CDATA[
				and DATE < #{date,jdbcType=DATE}
			]]>
			order by DATE desc
			limit 1
  </select>
  
  <select id="selectNext5Day" resultMap="BaseResultMap" parameterType="map">
  	select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
	    from G_STOCK_DAY
	    where
			STOCK = #{stock,jdbcType=INTEGER} 
			<![CDATA[
				and DATE > #{date,jdbcType=DATE}
			]]>
			order by DATE asc
			limit 5
  </select>
  
  <select id="selectPrev5Day" resultMap="BaseResultMap" parameterType="map">
  	select d.* from (
	  	select
	    <if test="distinct" >
	      distinct
	    </if>
	    <include refid="Base_Column_List" />
		    from G_STOCK_DAY
		    where
				STOCK = #{stock,jdbcType=INTEGER} 
				<![CDATA[
					and DATE < #{date,jdbcType=DATE}
				]]>
				order by DATE desc
				limit 5
	) d
	order by d.DATE asc
  </select>
  
  <select id="selectNext10Day" resultMap="BaseResultMap" parameterType="map">
  	select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
	    from G_STOCK_DAY
	    where
			STOCK = #{stock,jdbcType=INTEGER} 
			<![CDATA[
				and DATE > #{date,jdbcType=DATE}
			]]>
			order by DATE asc
			limit 30
  </select>
  
  <select id="selectPrev10Day" resultMap="BaseResultMap" parameterType="map">
  	select d.* from (
	  	select
	    <if test="distinct" >
	      distinct
	    </if>
	    <include refid="Base_Column_List" />
		    from G_STOCK_DAY
		    where
				STOCK = #{stock,jdbcType=INTEGER} 
				<![CDATA[
					and DATE < #{date,jdbcType=DATE}
				]]>
				order by DATE desc
				limit 10
	) d
	order by d.DATE asc
  </select>
  
  <select id="selectMA5" resultType="DOUBLE" parameterType="map">  	
	select avg(ma.CLOSE) as MA5 from (
	    select CLOSE
		    from G_STOCK_DAY
		    where
				STOCK = #{stock,jdbcType=INTEGER} 
				<![CDATA[
					and DATE < #{date,jdbcType=DATE}
				]]>
				order by DATE desc
				limit 5
		) ma
  </select>
  
  <select id="selectMA10" resultType="DOUBLE" parameterType="map">
  	select avg(ma.CLOSE) as MA10 from (
	    select CLOSE
		    from G_STOCK_DAY
		    where
				STOCK = #{stock,jdbcType=INTEGER} 
				<![CDATA[
					and DATE < #{date,jdbcType=DATE}
				]]>
				order by DATE desc
				limit 10
		) ma
  </select>
  
  <select id="selectValidDateByExample" resultType="java.lang.String" 
  		parameterType="com.st.framework.module.stock.example.GStockDayExample" >
    select
	    <if test="distinct" >
	      distinct
	    </if>
	    DATE
	from G_STOCK_DAY
	    <if test="_parameter != null" >
	      <include refid="Example_Where_Clause" />
	    </if>
	    <if test="orderByClause != null" >
	      order by ${orderByClause}
	    </if>
	    <if test="start != null and pageSize != null" >
	      limit #{start}, #{pageSize}
	    </if>
  </select>
</mapper>